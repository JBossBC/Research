# rateLimiter


在计算机网络中，限流就是控制网络接口发送或接收请求的速率M它可防止Dos攻击和限制web爬虫。

限流，也称流量控制。是指系统在面临高并发，或者大流量请求的情况下,限制新的请求对系统的访问，从而保证系统的稳定性。限流会导致部分用户请求处理不及时或者被拒，这就影响了用户体验。所以一般需要在系统稳定和用户体验之间平衡一下。

# 常见的限流算法

## 固定窗口限流算法

首先维护一个计数器，将单位时间段当作一个窗口,计算器记录这个窗口接收请求的次数

+ 当次数少于限流阈值，就允许访问，并且计数器+1
+ 当次数大于限流阈值，就拒绝访问
+ 当前的时间窗口过去之后，计数器清零

假设单位时间是1秒，限流阀值为3。在单位时间1秒内，每来一个请求,计数器就加1，如果计数器累加的次数超过限流阀值3，后续的请求全部拒绝。等到1s结束后，计数器清0，重新开始计数。


但是，这种算法有一个很明显的临界问题:假设限流阈值为5个请求，单位时间窗口是1s，如果我们在单位时间内的前0.8-1s和1-1.2s，分别并发5个请求。虽然都没有超过阈值，但是如果算0.8-1.2s，则并发数高达10，已经超过单位时间1s不超过5阈值的定义。

## 滑动窗口限流算法

滑动窗口限流解决固定窗口临界值的问题，它将单位时间周期划分为n个小周期，分别记录每个小周期内接口的访问次数，并且根据时间滑动删除过期的小周期。

假设单位时间还是1s，滑动窗口算法把它划分为5个小周期，也就是滑动窗口(单位时间)被划分为5个小格子。每格表示0.2s。每过0.2s，时间窗口就会往右滑动一格。然后，每个周期都有自己独立的计数器，如果请求是0.83s到达的，0.8~1.0s对应的计数器就会加1

假设我们1s内限流阈值还是5个请求，0.8~1.0s内来个5个请求，落在黄色格子里。时间过了1.0s这个点后，又来5个请求，落在紫色格子里。如果是固定窗口算法，是不会被限流的，但是滑动窗口的话，每过一个小周期，它会右移一小格。过了1.0s这个点后，会右移一小格，当前的单位时间段是0.2~1.2s，这个区域的请求已经超过限定的5了，已触发限流，实际上，紫色格子的请求都被拒绝了。

TIPS: 当滑动窗口的格子周期划分的越多，那么滑动窗口的滚动就越平滑，限流的统计就会越精确


滑动窗口算法虽然解决了固定窗口的临界问题，但是一旦到达限流后，请求都会直接暴力被拒绝。酱紫我们会损失一部分请求，这其实对于产品来说，并不太友好。

## 漏桶算法

漏桶算法面对限流，就更加的柔性，不存在直接的粗暴拒绝。

它的原理很简单，可以认为就是注水漏水的过程。往漏桶中以任意速率流入睡，以固定的速率流出水。当水超过桶的容量时，会被溢出，也就是被丢弃。因为桶容量是不变的，保证了整体的速率。

+ 流入的水滴，可以看作是访问系统的请求，这个流入速率是不确定的。
+ 桶的容量一般表示系统所能处理的请求数
+ 如果桶的容量满了，就达到限流的阈值，就会丢弃水滴(拒绝请求)
+ 流出的水滴，是恒定过滤的，对应服务按照固定的速率处理请求。

在正常流量的时候，系统按照固定的速率处理请求，是我们想要的，但是面对突发流量的时候，漏桶算法还是循规蹈矩地处理请求，这就是我们不想看到的。流量变突发时，我们肯定希望系统能够尽快处理请求，提升用户体验。



