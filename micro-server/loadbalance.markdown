# loadbalance



## RPC间的负载均衡

每一个被调用服务都会有多个实例，那么服务的调用方应该将请求发向被调用服务的哪一个服务实例，这就是负载均衡的业务场景

负载均衡第一个关键点是公平性，即负载均衡需要关注被调用服务实例组之间的公平性，不要出现服务实例一直没被调用或者服务实例一直被调用的情况。

负载均衡第二个关键点是正确性，即对于有状态的服务来说，负载均衡需要关心请求的状态，将请求调度到能处理它的后端实例上，不要出现不能处理和错误处理的情况。

### 无状态的负载均衡

无状态的负载均衡是我们日常工作中接触比较多的负载均衡模型，它指的是参与负载均衡的后端实例是无状态的，所有的后端实例都是对等的，一个请求无论发向哪一个实例，都会得到相同的并且正确的处理结果，所以无状态的负载均衡策略不需要关心请求的状态。

+ 轮询

     轮询的负载均衡策略非常简单，只需要将请求按顺序分配给多个实例，不用再做其他的处理。在公平性方面，因为轮询策略只是按顺序分配请求，所以适用于请求的工作负载和实例的处理能力差异都较小的情况。
+ 权重轮询

     权重轮询的负载均衡策略是将每一个后端实例分配一个权重，分配请求的数量和实例的权重成正比的轮询。权重轮询在路由时，不利用请求的状态信息，属于无状态的负载均衡策略。在公平性方面，因为权重策略会按实例的权重比例来分配请求数，所以他的公平性比轮询策略要好

### 有状态的负载均衡

在负载均衡策略中会保存服务端的一些状态，然后根据这些状态按照一定的算法选择出对应的实例。


+ p2c+EWMA

    在go-zero中默认使用的是P2C的负载均衡算法，该算法的原理比较简单，即随即从所有可用节点中选择两个节点，然后计算这两个节点的负载情况，选择负载较低的一个节点来服务本次请求。为了避免某些节点一直得不到选择导致不平衡，会在超过一定的事件后强制选择一次。

     在该负载均衡算法中，采用EWMA指数移动加权平均的算法，表示是一段时间内的均值。该算法相对于算数平均来说对于突然的网络抖动没有那么敏感，突然的抖动不会体现在请求的lag中，从而可以让算法更加均衡。