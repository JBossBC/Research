# Protocol Buffers


protocol buffers提供了一种语言中立、平台中立、拥有可扩展机制，用于向前兼容和向后兼容的方式序列化结构化数据。它类似于json，只是它更小更快，并且它生成本地语言绑定。

protocol buffer是定义语言、proto编译器生成的与数据交互的代码、特定于语言的运行时库以及写入文件(或发送)的数据的序列化格式的组合通过网络连接)




## protocol buffers能解决什么问题

protocol buffers为大小高达几百万字节的类型化结构化数据提供了序列化格式。该格式适用于临时网络流量和长期数据存储。可以使用新信息扩展协议缓冲区，而无需使现有数据无效或需要更新代码。


protocol buffer是google1最常用的数据格式。它们广泛用于服务器间的通信以及磁盘上数据的归档存储。


## protocol buffers的好处


Protocol buffers 非常适用于任何需要以语言中立、平台中立、可扩展的方式序列化结构化、类记录、类型化数据的情况。它们最常用于定义通信协议（与 gRPC 一起）和数据存储。

使用protocol buffers的一些优点包括：

紧凑的数据存储
快速解析
许多编程语言的可用性
通过自动生成的类优化功能


## protocol buffers不适用于所有数据


+ protocol buffers倾向于假设整个消息可以一次加载到内存中并且不大于对象图???。对于超过几百万字节的数据，考虑到不同的解决方案，当处理更大的数据时，由于序列化副本，您可能最终会得到多个数据副本，这可能导致内存使用量出现惊人的峰值

+ 当protocol buffers被序列化时，相同的数据可以有许多不同的二进制序列化。如果不完全解析它们，就不能比较两条消息是否相等。消息未压缩，虽然可以像其他任何文件一样对消息进行压缩或gzip压缩，但jpeg和png使用的专用压缩算法将为适当类型的数据生成小得多的文件

+ 对于涉及大型多维浮点数数组的许多科学和工程用途，Protocol buffer 消息在大小和速度方面都达不到最大效率。对于这些应用程序，FITS 和类似格式的开销较小。
+ 科学计算中流行的非面向对象语言（如 Fortran 和 IDL）不能很好地支持protocol buffers
+ protocol buffers消息本身不自我描述它们的数据，但它们有一个完全反射模式，您可以使用它来实现自我描述，也就是说，如果不访问相应的.proto文件，你就无法完全解释这个消息本身。
+ protocol buffers不是任何组织的正式标准，这使得它们不适合在具有标准构建的环境中使用。

