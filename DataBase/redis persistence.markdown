# Redis Persistence

redis的所有数据都是保存在内存中，然后不定期的通过异步方式保存在磁盘上(这称为:半持久化模式");也可以把每一次数据变化都写入到一个append only file(aof)里面(这称为"全持久化模式")


## RDB

 RDB:按指定的时间间隔执行数据集的时间点快照

### 配置参数

> 配置文件再redis.conf中SNAPSHOTTING部分

+ save

    如果给定的秒数和对数据库执行的写入操作数都达到设定的阈值，则执行数据库持久化，通俗易懂的讲:配置RBD备份频率，默认行为:
          
        1. 900秒后，如果至少有一个键更改
        2. 300秒后，如果至少有10个键更改
        3. 60秒后，如果至少1000个键发生更改 

+ stop-writes-on-bgsave-error

     默认情况下，如果启用RDB快照，redis将停止接收写操作。这将使用户意识到(通过报错的方式)数据没有持久化。如果后台保存过程将重新开始工作，redis将自动允许再次写入。但是，如果您已经设置了对redis服务器的适当监视和持久性，您可能希望禁用此功能。通俗易懂地讲:**此参数设为no，表示在进行rdb持久化时主进程将停止接受读写操作;设置为yes，表示在进行rdb持久化时主进程将继续接收读写操作，数据不一致地问题交由用户自己处理。

+ rdbcompression

     对于存储到磁盘中的快照文件，设置是否进行压缩，redis采用LZF压缩算法，如果想节省CPU性能可以关闭此功能，默认yes

+ rdbchecksum

     存储快照后，还可以让redis使用CRC64算法进行数据校验，但是这样做大约会增加10%的性能损耗，如果想获得最大性能可以关闭此功能，默认yes。

+ dbfilename

     将数据库转存到的文件名，默认dump.rdb

+ dir

     工作目录，数据库中的数据将被写入这个目录，请注意必须在此处指定目录，而不是文件名，默认当前路径。


### 如何触发rdb快照

     + 配置文件中默认的快照配置
     + 客户端使用命令save或者bgsave save
          save:执行save命令时只管保存,其他命令阻塞
          bgsave:bgsave命令会在后台异步进行快照操作，快照同时还可以响应客户端请求。可以通过lastsave命令获取最后一次成功执行快照的时间   

     + 客户端shutdown会立刻刷新dump.rdb文件
### 如何恢复

     如果需要恢复数据，只需要将备份文件(dump.rdb)移动到redis安装目录并启动服务即可。获取redis目录可以使用config命令

 `config get dir`



### RDB的优势

1. RDB是redis数据的非常紧凑的单文件时间点表示。例如，你可能希望在最近24小时内每小时归档一次RDB文件，并在30天内每天保存一个rdb快照。这允许您在发生灾难时轻松恢复数据集的不同版本。
2. rdb对于灾难恢复非常好，它是一个单一的压缩文件，可以传输到远程的数据中心，或者传输到AmazonS3(可能是加密的).
3. rdb最大限度地提高了redis的性能，因为redis父进程需要持久化，唯一需要做的工作就是派生一个子进程来完成其余的工作。父实例永远不会执行磁盘I/O或类似操作
4. 与AOF相比，RDB允许使用大数据集更快地重新启动


### RDB的劣势

1. 数据风险大，RDB采用在一定时间间隔内做一次备份，如果redis服务意外down掉，就会丢失最后一次未备份的修改
2. fork子进程在进行备份时，内存中的数据被克隆了一份，需要考虑数据2被膨胀的问题。
      

## AOF

记录服务器接收的每个写入操作，采用仅追加方式将命令写入AOF文件,服务启动时再重新执行AOF文件中的命令以达到恢复数据的目的。使用与redis协议本身相同的格式记录命令，具有很好的可读性。当日志太大时，redis可以在后台重写日志(rewrite机制)



