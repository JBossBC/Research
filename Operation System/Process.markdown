 # Process


## Question
BSS段？
数据段:怎么理解全局变量已经被初始化，这个和堆中的被动态分配的内存段有什么区别


所有进程(执行的程序)都必须占用一定数量的内存，他或是用来存放从磁盘载入的程序代码，或是存放取自用户输入的数据等等。不过进程对这些内存的管理方式因内存用途不已而不尽相同，有些内存是实现静态分配和统一回收的，而有些却是按需要动态分配和回收的

进程对应的内存空间中所包含5种不同的数据区

+ 代码段:代码段是用来存放可执行文件的操作指令，也就是说它是可执行程序在内存中的镜像。代码段需要防止在运行时被非法修改，所以只准许读取操作，而不允许写入(修改)操作。
+ 数据段:数据段用来存放可执行文件中已初始化的全局变量，换句话说就是存放程序静态分配的变量和全局变量
+ **BSS段:BSS段包含了程序中未初始化的全局变量，在内存中bss段全部置零**
+ 堆:堆是用于存放进程运行中被动态分配的内存段，它的大小并不固定，可动态扩张或缩减。当进程调用malloc等函数分配内存时，新分配的内存就会被动态添加到堆上(堆被扩展);当利用free等函数释放内存时，被释放的内存从堆中被剔除(堆被缩减)
+ 栈:栈是用户存放程序临时创建的局部变量，也就是说我们函数{}中定义的变量(但不包括static声明的变量，static意味着在数据段中存放变量)。除此以外，在函数被调用时，其参数也会被压入发起调用的进程栈中，并且待到调用结束后，函数的返回值也会被存放回栈中，由于栈的先进先出特点，所以栈特别方便用来保存/恢复调用现场。从这个意义上讲，我们可以把堆栈看成一个寄存、交换临时变量的内存区。
+ 内核部分:每个进程的虚拟地址空间里都映射了相同的内核内存。当进程在用户态内存运行的时候，内核内存对其不可见。只有当进程进入内核态时，才能访问内核内存。