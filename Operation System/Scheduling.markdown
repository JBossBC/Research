# Scheduling

## Question

系统中断？？？

------

一般来说，一个系统会同时处理多个请求，但是其资源是有限的，调度就是用来协调每个请求对资源的使用的方法。调度不仅仅是计算机中的概念。在柜台办理业务的时候，人们默认会按照先到先得的原则排队，如果将柜台理解为资源，每个人都对应着一个请求，那么排队就是让请求通过先到先得的方式来使用资源，这是一种直观的调度策略1.在业务办理窗口经常能够看到"VIP用户优先"的标识，这就体现了调度中优先级的概念，会根据重要程度给每个请求分配优先级，优先级高的请求可以优先使用资源。又比如，小明和小红约定一个人玩十分钟游戏机后，就换另一个人玩，这体现了调度中时间片的概念，表示每个请求一次可以占用多长时间的资源。其实每个人自己也可以理解为一份资源，人们每天会有不同的事情要完成，那么应该先做哪件后做哪件？这也需要运用调度的思想。比如一件事情的截至时间较近，或者比较容易完成，那么人员就可能会倾向于先完成它。


## operation system scheduling

**进程是资源隔离的单位，并不是执行的单位。一个进程中可以有多个线程，这些线程可以在不同的cpu核心上并行地执行。因此线程才是调度器的调度对象，在linux等操作系统中通常用任务来描述线程。**

一般调度器会通过维护运行队列的方式来管理任务。运行队列并非一定由先进先出的队列实现，例如linux使用的调度器中会用红黑树来实现运行队列。任务在执行时若触发一定条件，则会停止执行，这些条件可以是:

+ 该任务执行了指定的时间片后，应让其他任务在当前CPU核心上执行。
+ 该任务发起了I/O请求，在I/O返回前，它不会继续执行。
+ 该任务主动停止执行或进入睡眠
+ 该任务被系统中断打断，系统优先处理中断而暂缓任务的执行。

结束执行后，如果任务还需要执行，会被重新加入运行队列，并等待再次被调度执行。

调度器的主要作用是做出调度决策，整个系统通过该决策进而决定该如何调度。这些调度决策包括:

+ 从运行队列中选择下一个运行的任务
+ 决定执行该任务的CPU核心
+ 决定该任务被允许运行的时间，即时间片。
 


在调度器做出决策后，系统中的相应机制便会将任务执行在对应的CPU核心上。


调度器中存在一些设计问题:

+ 调度器应该做出什么样的调度决策?计算机系统使用调度器的目的是通过协调任务对CPU的使用，进而让任务在某一方面达到用户的预期，或者说达成用户指定的调度指标。

