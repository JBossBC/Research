# Operation System Structure

操作系统乃至计算机系统中控制复杂度的一个重要设计原则是:**将策略与机制相分离、其中策略表示要做什么，机制表示该如何做。**对于计算机登录认证系统而言，机制包括输入处理、策略文件管理、桌面启动加载等，策略则包括什么用户能以什么权限登录这台计算机。而对操作系统的调度系统而言，策略包括先到先得、时间片轮转等，机制则包括调度队列的设计、调度实体的表示与调度的中断处理等。

通过机制与策略的分离，操作系统一方面可以通过多种不同的策略来适应不同的应用需求，而不需要重新来实现对应的具体机制，另一方面也可以通过持续优化具体的机制以不断完善一个策略的实现。

策略与机制分离我们可以适当类比成web开发中的常用三层架构，controller、service、dao，机制强调做什么，也就可以相当于controller层，当我收到一个请求，我该去如何进行处理来得到用户想要的数据，service和dao层相当于策略"怎样去做"，通常企业开发都会有版本迭代的要求，我们不仅仅要满足解决问题，更应该方便作为框架去进行二次使用，如何去操作数据库的数据其实有很多种路径，根据当前客户需求和可行性去想出合理的解决方法。


## 操作系统复杂度管理办法

管理复杂系统的重要方法是M.A.L.H方法，即模块化、抽象、分层和层级

模块化:模块化就是通过"分而治之"原则，将一个复杂系统分解为一系列通过明确定义的接口进行交互的模块，并严格保障模块之间的界限。**模块划分不是越细越好，过多的模块反而会导致模块之间联系过多，无益于复杂度的控制；划分要充分考虑高内聚和低耦合，使模块具有独立性。**现代操作系统都存在一定程度的模块化结构，包括进程管理、内存管理、网络协议栈、设备驱动等。

抽象:抽象是在模块化的基础上，将接口与内部实现分离，**从而使模块之间只需通过抽象的接口**进行相互调用，而无须关心各个模块之间的内部实现。**一个好的抽象应该尽可能依从模块间的自然边界，并尽可能地减少模块间地交互，从而减少错误在模块间地传递，提高整体系统地开发效率、质量和性能等**


## 宽进严出原则

**一个模块地接口应该容忍各种可能的输入，抑制错误甚至恶意的输入，避免错误或恶意输入的效果在模块内传播，并且尽可能严格控制模块对外的输出，从而减少错误在模块间传递**

良好的模块化与抽象可以很好将一个大系统分解为一系列能够较好地进行交互的模块。然而对于一个大的复杂系统而言，一个可能的结果是分解的模块会非常多，相互的交互关系会非常复杂，因此需要进一步通过分层与层级来控制复杂度。**分层和层级的目的是为了降低过多模块进行交互的复杂度**

+ 分层:分层是通过将模块按照一定的原则进行层次的划分，约束每层内部模块间的交互方式与跨层次模块间的交互方式，从而有效地减少模块之间的交互。通常的原则是:一个模块只能和同层模块以及相邻的上层或下层模块进行交互:而不能跨一层和再上一层或者再下一层的模块进行交互。分层也是构建复杂系统的一个重要的方式:确定层级后，我们可以先构建底层的模块，然后再利用底层模块提供的功能进一步构建上层模块.
+ 层级是另外一种模块的组织方式。首先将一些功能相近的模块组成一个具有清晰接口的自包含子系统，然后再将这些子系统递归地组成一个具有清晰接口地更大子系统。层级是日常常生活中常见的组织形式。在操作系统中，虚拟内存是一个子模块，与物理内存分配、缺页异常处理、页换入换出等一起构成内存管理模块，内存管理模块再和进程管理模块、设备驱动模块等一起构成操作系统内核。

**分层是指不同类模块之间的层级，而层级则是指同类模块之间的分层**