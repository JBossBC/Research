# File System


文件是操作系统在进行存储时使用的最多的抽象之一。每个文件实质上是一个有名字的字符序列。序列的内容为文件数据，而序列长度、序列修改的时间等描述文件数据的属性、支撑文件功能的其他信息称为文件元数据。**应用程序使用一组特定的接口对文件进行访问，如打开、定位、读取、写入和关闭等**。文件名用来区分不同的文件，通常保存在目录中。每个文件名和对应的文件地址或编号组成一个目录项，一个或多个目录项组成一个目录。一般情况下，目录本身被设计成一种特殊的文件，应用程序需要使用专门的接口来操作目录，例如创建目录（mkdir)和删除目录(rmdir)等。**实现文件接口并负责管理文件数据和元数据的系统，即为文件系统**

文件系统是操作系统中文件的管理者。对上层用户和应用程序来说，文件系统提供文件抽象并实现文件访问所需要的接口，对下层存储设备来说，文件系统以特定格式在存储设备上维护着每个文件的数据和元数据。通常来说，文件系统将文件保存在存储设备中。操作系统将这些存储设备抽象为块设备，以方便文件系统使用统一的接口访问。块设备上的存储空间在逻辑上被划分为固定大小的存储块。块，是块设备读写的最小单元，大小一般为512字节或4kb。每个存储块均有一个地址，称为块号。文件系统在请求中指定块号，操作系统负责对块设备中的指定块进行数据写入和读取。

### Demo

当下载工具从网络中获取到文件内容之后，文件内容被暂存在下载工具的内存中。为了将这些数据持久保存下来，下载工具向操作系统发起了一系列**系统调用(如open和write等)。**在处理系统调用时，linux内核会调用其虚拟文件系统处理文件请求。虚拟文件系统如同一个大管家，负责管理具体的文件系统，并提供一系列服务，如**页缓存**、**inode缓存**、和**目录项缓存**等。linux虚拟文件系统在解析用户的请求后，调用具体的文件系统的接口进一步处理请求。具体的文件系统(比如Ext4文件系统)会根据请求对数据进行读取或修改。当需要访问存储设备上的数据时，文件系统会创建对存储块的访问请求，并发送给I/O调度器。由于可能同时存在多个对存储设备的访问请求，I/O调度器根据预定策略对这些请求进行调度，以一定的顺序发送给设备驱动。最终，设备驱动与存储设备进行交互并完成请求。在存储设备完成写入请求后，下载的文件便被持久保存到了存储设备之中。

## 基于inode的文件系统

### inode与文件

如果每个文件的大小都不超过一个存储块的大小(512字节或4B)，那么我们完全可以用存储设备的块号来作为文件的唯一标识，也就是文件的"名字"。然后，这个假设并不永远成立，音乐、图片等文件的大小通常为数MB，需要几千个4KB的块才能存下；一个4GB的电影文件则需要100万个4KB的块！假设每个块号为64位，那么仅仅记录这100万个块号就需要8MB--而这本身又需要2048个块(8MB/4KB).那么，文件系统该如何记录并组织一个文件对应的存储块呢？

inode就是用来记录磁盘块的一种结构。inoded是"index node"的简写，即"索引节点"，记录了一个文件所对应的所有存储块号(即存储的索引)。每个inode对应一个文件；通过一个inode，就可以访问这个文件所有的数据。inode的结构该如何设计呢？一种简单的方法是将文件所有的存储块号都按顺序保存在inode中。然后，这种方法会导致inode大小随文件大小的变化而变化，如果某个文件不断增长，inode没有了空间怎么办？**链表的设计初衷(不好指定数组的预留空间)**一种解决方案是为inode预留足够大的空间；但为了支持4GB的文件，每个inode都不得不预留8MB的连续磁盘空间，这会导致空间的浪费。另一种解决方案类似虚拟内存中提到的页表，在inode中采用分级的方式组织存储块号。inode中保存了三种存储指针(即存储设备的块号):第一种指针为直接指针，其直接指向数据块，数据块中保存了文件数据；第二种指针为间接指针，指向一个一级索引块，一级索引块中存放着指向数据块的指针；第三种指针为二级间接指针，指向一个二级索引块，二级索引块中的每个指针均指向一个一级索引块，进而指向多个数据块