# File System

## Question

不同文件系统之间有什么区别

----

文件是操作系统在进行存储时使用的最多的抽象之一。每个文件实质上是一个有名字的字符序列。序列的内容为文件数据，而序列长度、序列修改的时间等描述文件数据的属性、支撑文件功能的其他信息称为文件元数据。**应用程序使用一组特定的接口对文件进行访问，如打开、定位、读取、写入和关闭等**。文件名用来区分不同的文件，通常保存在目录中。每个文件名和对应的文件地址或编号组成一个目录项，一个或多个目录项组成一个目录。一般情况下，目录本身被设计成一种特殊的文件，应用程序需要使用专门的接口来操作目录，例如创建目录（mkdir)和删除目录(rmdir)等。**实现文件接口并负责管理文件数据和元数据的系统，即为文件系统**

文件系统是操作系统中文件的管理者。对上层用户和应用程序来说，文件系统提供文件抽象并实现文件访问所需要的接口，对下层存储设备来说，文件系统以特定格式在存储设备上维护着每个文件的数据和元数据。通常来说，文件系统将文件保存在存储设备中。操作系统将这些存储设备抽象为块设备，以方便文件系统使用统一的接口访问。块设备上的存储空间在逻辑上被划分为固定大小的存储块。块，是块设备读写的最小单元，大小一般为512字节或4kb。每个存储块均有一个地址，称为块号。文件系统在请求中指定块号，操作系统负责对块设备中的指定块进行数据写入和读取。

### Demo

当下载工具从网络中获取到文件内容之后，文件内容被暂存在下载工具的内存中。为了将这些数据持久保存下来，下载工具向操作系统发起了一系列**系统调用(如open和write等)。**在处理系统调用时，linux内核会调用其**虚拟文件系统**处理文件请求。虚拟文件系统如同一个大管家，负责管理具体的文件系统，并提供一系列服务，如**页缓存**、**inode缓存**、和**目录项缓存**等。linux虚拟文件系统在解析用户的请求后，调用具体的文件系统的接口进一步处理请求。具体的文件系统(比如Ext4文件系统)会根据请求对数据进行读取或修改。当需要访问存储设备上的数据时，文件系统会创建对存储块的访问请求，并发送给I/O调度器。由于可能同时存在多个对存储设备的访问请求，I/O调度器根据预定策略对这些请求进行调度，以一定的顺序发送给设备驱动。最终，设备驱动与存储设备进行交互并完成请求。在存储设备完成写入请求后，下载的文件便被持久保存到了存储设备之中。

## 基于inode的文件系统

### inode与文件

如果每个文件的大小都不超过一个存储块的大小(512字节或4B)，那么我们完全可以用存储设备的块号来作为文件的唯一标识，也就是文件的"名字"。然后，这个假设并不永远成立，音乐、图片等文件的大小通常为数MB，需要几千个4KB的块才能存下；一个4GB的电影文件则需要100万个4KB的块！假设每个块号为64位，那么仅仅记录这100万个块号就需要8MB--而这本身又需要2048个块(8MB/4KB).那么，文件系统该如何记录并组织一个文件对应的存储块呢？

inode就是用来记录磁盘块的一种结构。inoded是"index node"的简写，即"索引节点"，记录了一个文件所对应的所有存储块号(即存储的索引)。每个inode对应一个文件；通过一个inode，就可以访问这个文件所有的数据。inode的结构该如何设计呢？一种简单的方法是将文件所有的存储块号都按顺序保存在inode中。然后，这种方法会导致inode大小随文件大小的变化而变化，如果某个文件不断增长，inode没有了空间怎么办？**链表的设计初衷(不好指定数组的预留空间)**一种解决方案是为inode预留足够大的空间；但为了支持4GB的文件，每个inode都不得不预留8MB的连续磁盘空间，这会导致空间的浪费。另一种解决方案类似虚拟内存中提到的页表，在inode中采用分级的方式组织存储块号。inode中保存了三种存储指针(即存储设备的块号):第一种指针为直接指针，其直接指向数据块，数据块中保存了文件数据；第二种指针为间接指针，指向一个一级索引块，一级索引块中存放着指向数据块的指针；第三种指针为二级间接指针，指向一个二级索引块，二级索引块中的每个指针均指向一个一级索引块，进而指向多个数据块.

此时我们假定每个inode中直接指针有12个，间接指针有3个，二级间接指针有1个，每个存储块大小为4KB,每个指针的大小为8bytes,根据上面的存储规则计算,直接指针能够存储48KB的数据块,如果文件超过48KB,那么就会用到间接指针,间接指针一共有三个，每个间接指针指向一个4KB的一级索引块，一级索引块有512个直接指针，一个间接指针也就能保存2MB的数据块,三个就能保存6MB,如果文件大小超过6MB+48KB,则会用到二级间接指针，二级间接指针是间接指针的拓展，也就是说，对于二级间接指针来说，第一次指向的4KB的二级索引块，二级索引块存储的是一个间接指针，而不是直接指针，每个间接指针又指向一个一级存储块，一级存储块中存储的才是数据块。这个时候,一个二级间接指针能够存储的数据为512*2MB=1GB的数据块。 **对于我们假定的inode中，总共就能够最大存储1GB+6MB+48KB的文件，这种存储结构具有一定的扩展性。**

inode中除了记录存储的索引外,还记录了该文件相关的其他元数据,包括文件模式、文件链接数、文件拥有者和用户组、文件大小以及文件访问时间等。

一个文件i同一般会支持多种文件类型

|文件类型|文件用途|
|--|--|
|常规文件|保存数据|
|目录文件|表示和组织一组文件|
|符号链接文件|保存符号链接(指向目标文件的路径)|
|FIFO文件|以队列形式传递数据,又称命名管道|
|套接字文件|用于传递数据,比FIFO文件更为灵活|
|字符设备文件|表示和访问字符设备|
|块设备文件|表示和访问块设备|

### 文件名与目录

inode与文件之间是一一对应的，然而对于计算机程序来说，通过inode号(inode结构的编号)就可以找到对应的文件。然而对于用户来说，使用inode号作为文件名进行记忆比较困难。除了难以记忆外，**使用inode号直接表示文件还会造成inode号与文件存储位置强耦合。如果inode号与文件inode的存储位置一一对应，文件系统就无法在不改变inode号的情况下更改inode的存储位置，也无法用一个新的inode号指代一个已有的inode结构(genius)。**为了对用户更加友好,文件系统引入了我们熟悉的**字符串形式的文件名**,从而增加了一层从文件名字字符串到inode号之间的映射。字符串形式的字符串方便记忆，也可以使文件名与文件具体的存储位置解耦。**文件名并不是文件的元数据,文件名的存放位置为目录**

目录是一种特殊类型的文件，记录了从文件名到inode号的映射。由于目录本身也是文件,因此可以通过递归,来结构化组织文件系统中的文件。与常规文件中保存的用户数据不同，目录中保存的是一种特殊的结构-目录项。**每个目录项代表一条文件信息，记录了文件的文件名和对应的inode号。**


目录项中的inode号用于找到文件名所对应的inode结构，从而访问文件数据和元数据。**目录项长度用于记录整个目录项的长度，主要是为了目录项的删除和重用而设计的。**文件名长度记录着后面保存的文件名的有效长度。以此格式,目录项一个接一个地存放在文件的数据块中，组成一个连续地字符序列,从而可以直接复用常规文件的数据组织方式。


对目录的操作:
 + 查找:在目录中查找某个文件时,文件系统从一个目录文件中存放的第一个目录项开始，依次比较目录项中存放的文件名。当目录项中的文件名与要查找的文件名相同时,文件系统根据该目录项保存的inode号找到文件的inode,从而在inode上进行各种操作。
 + 遍历:目录的遍历操作与查找操作类似,文件系统依次检查目录文件中保存的所有有效(还未被删除)目录项,并通过回调函数等方式返回结果。
 + 增加:当一个新的文件被创建时,文件系统会在其父目录中增加一个新的目录项，记录所创建文件的目录项和inode号。为了节省存储空间，如果目录文件中有无效的目录项,且该目录项空间足够，则文件系统可以重用此文件项的位置存放新的目录项。如果没有合适的无效目录项,则新的目录项会追加记录到目录文件末尾。
 + 删除:当一个文件被删除时，文件系统会从其父目录中删除对应的目录项。**删除操作通过将目录项中的inode号变为0来标记这个目录项是无效的.**这种方式无须为目录有效性信息预留额外的存储空间，可以更加高效地利用空间(有点像设计模式中的哨兵模型，通过额外增加一个空间，通过这个空间来判断是否到头,来判断数据是否存在于此搜索空间)同时，在进行文件删除时，可以将相邻的无效目录项进行合并，以允许更长的新目录项重新利用这些空间。