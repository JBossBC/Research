# What is Operation System

操作系统是计算机硬件和用户交互的一个接口

操作系统有两个职责:对硬件进行抽象和管理，为应用提供服务并进行管理。

从硬件角度来看，操作系统主要包含两类共性功能:一、是管理硬件，二是对硬件进行抽象。操作系统的核心功能是将有限的、离散的资源高效地抽象为无限的、连续的资源。应用开发者无须关心物理内存硬件的型号、位置和容量，而是面对一个统一的、近乎无限的虚拟地址空间进行编程。

从应用的角度来看，操作系统主要包含两类共性功能:一、是服务于应用，二是管理应用。一方面，操作系统提供了不同层次、不同功能的接口以满足应用的需求，还提供了不同类型的访问控制、应用间交互等服务。另一方面，操作系统还负责对应用生命周期的管理，包括应用的加载、启动、切换、调度、销毁等。通过对应用的管理，操作系统能够从全局的角度来进行资源的分配，从而保证应用间的公平性、性能与安全的隔离性，限制少数恶意的应用对系统整体产生的影响。

对于操作系统必要性的思考，假如说一个应用希望直接控制硬件而不是使用操作系统提供的抽象，是否还需要操作系统?尽管应用希望直接控制硬件，但对于**应用的加载和销毁以及控制**也是需要操作系统的完成。操作系统也可以从全局的角度更加合理地对应用进行调度，从而更加高效地利用计算机资源。对于操作系统，我们必须要从两个维度去思考，一个是操作系统对于硬件的管理以及抽象，第二个维度是操作系统对于应用的维护和调度。


# How to design a operation system

1. 启动操作系统的bootloader，用于了解操作系统启动前的状态和要做的工作，了解运行操作系统的硬件支持，操作系统如何加载到内存中，理解两类中断-"外设中断","陷阱中断"等;

2. 物理内存管理子系统，理解x86分段/分页模式，了解操作系统如何管理物理内存
3.  虚拟内存管理子系统，通过页表机制和换入换出机制，以及中断-"故障中断"、缺页故障处理等，实现基于页的内存替换算法
4.  内核线程子系统，用于了解如何创建相对与用户进程更加简单的内核态线程，如何对内核线程进行动态管理等
5.   用户进程管理子系统，用于了解用户态进程创建、执行、切换和结束的动态管理过程，了解在用户态通过系统调用得到内核态的内核服务的过程
6.   处理器调度子系统，用于理解操作系统的调度过程和调度算法
7.    同步互斥与进程间通信子系统，了解进程间如何进行信息交换和共享，并了解同步互斥的具体实现以及对系统性能的影响，研究死锁产生的原因，以及如何避免死锁
8.    文件系统，了解文件系统的具体实现，与进程管理等的关系，了解缓存对操作系统IO访问的性能改进，了解虚拟文件系统(VFS)、buffer cache和disk driver之间的关系

![](https://objectkuan.gitbooks.io/ucore-docs/content/lab0_figs/image001.png)