# layer2 

rollup是一大类layer-2扩容方案的统称，特指先在链下进行复杂的计算和状态维护，再将与状态更改相关的数据通过合约调用的方式，利用更便宜的CALLDATA在链上保存。任何人都能根据链上保存的数据复原出全局状态，从而消除因数据可用性问题带来的安全风险。Rollup将大量交易卷起汇总成为一个交易，在保证数据可用性的前提下提高TPS。


那么如何保证状态更改的正确性?ZK Rollup和Optimistic Pollup是目前较热的两种不同方案，他们的核心区别如下:

+ zk rollup方案的关键在于zk,它的每一次的状态转变都需要提供零知识证明，并由主链上的合约进行验证，只有验证通过才能更改状态。即，ZK Rollup 的状态转变严格依赖于密码学证明。
+ Optimistic Rollup方案中，每次状态转变无需严格验证，他是先乐观地假设每次转变都是正确的，然后在一定时限内可以对某次转变进行挑战，如果挑战成功就证明之前的提交有问题，会惩罚提交者并将状态回滚。即，Optimistic Rollup 的状态转变依赖于经济激励和博弈。


两种方案的差别还可以从证明模型角度来看：前者为 Validity Proof（有效性证明），只有提供了「有效性证明」的状态才会被写入主链合约；后者为 Fraud Proof （错误性证明），用户需要在挑战期内对异常提供「错误性证明」，举报不正确的状态。


在安全性上，ZK Rollup 更具优势。因为 Optimistic Rollup 或基于 Fraud Proof 的二层扩容协议必须在挑战期内投诉举报，因此可以构造一个场景让矿工配合做恶，在挑战期内拒绝掉所有提交 Fraud Proof 的投诉交易，导致不正确的状态转变会被确认，攻击者可从合约中盗取资金。但这种攻击方式对 ZK Rollup 无效，因为它的合约中始终有正确性校验。


在 TPS 上，ZK Rollup 利用 zk-SNARK 技术在保障数据正确性的同时压缩了链上计算量。所有交易的计算过程不用在合约中执行， Operator （运营者）只需把存储账户状态的 Merkle Tree 的 Merkle Root、交易数据和 zk-SNARK 证明提交至合约，合约验证通过后将新的状态写入。


因为 zk-SNARK 证明大小（很小）与验证时间（很快）是常数，不会随交易数量增长，因此 ZK Rollup 可以极大地提高交易 TPS。ZK Rollup 的链上性能限制仅取决于 CALLDATA 存储数据的成本，随着以太坊伊斯坦布尔升级的完成，CALLDATA 使用成本降为原来的 1/4，ZK Rollup 的性能则获得 4 倍提升，TPS 可达到近 2000。


目前已有多个团队基于 ZK Rollup 方案开发，比如 Matter Labs 发布的无需信任的扩容和隐私方案 ZK Sync。ZK Sync 底层依赖于 ZK Rollup，产品路线为先专注提高简单转账的性能和易用性，再实现通用智能合约的扩容，最后再加上隐私保护，其目标是在确保安全性的前提下提升交易性能。


## Validity Proof：设计 Layer-2 的一种新思路



名为 Rollup 的 Layer-2 可扩展性方案风头正劲，但其实，是不是 Rollup 可能不算重点，Layer-2 方案使用的是 Validity Proof （有效性证明）还是 Fraud Proof （错误性证明）才是重点。


此前的 Layer-2 方案，如状态通道和 Plasma，在用户取款时，也即在链下状态上链完成清算的过程中，是无法防止运营者或用户提交非最新状态的，因此这些方案都有「挑战期」，即在状态上链后的一段时间内允许他人提交更新的状态，或者证明上链状态是无效的。我们称这种模式为「错误性证明」。


然而，一种新的思路认为，为什么不仅在某人能证明自己提交的状态转换是有效的时候才接收 TA 提交的状态更新呢？换言之，这种模式要求链下计算的运营者证明某些计算已然发生，并由智能合约负责验证，当且仅当新状态值被证明是经合法运算而成时才接受该值并更新状态。我们称这种这种模式为「有效性证明」，它只需保证证据足够小、验证所需计算量足够低便可。


以 ZK Rollup 为代表的方案，与其它 Rollup 方案以及更早的 Layer-2 方案的区别，就在于证明状态转换有效性的思路上。相比错误性证明，有效性证明在不少方面都有巨大优势，其最大的好处在于免去了长时间的挑战期，提高了资金运转效率和用户体验。


## CREATE2 指令：大有用途的新的合约部署方式


EIP 1014：CREATE2 指令，添加一个新的 0xf5 操作码指令 CREATE2 ， 0xf5 指令的行为和 CREATE 相同，只不过它使用 keccak256 ( 0xff ++ address ++ salt ++ keccak256(init_code))[12:] 而不是发送者+nonce hash 来计算合约地址。


虽然 EIP 1014 的 CREATE2 是一个很小的改动，但它对二层的设计有很大的作用。


当前以太坊在合约部署时是没办法预测合约的地址的，因为合约地址由发送方地址和合约部署时发送方的 nonce 决定，但发送方的 nonce 无法预测。我们知道，二层的交易有效是因为有一层的合约的约束，如果要求二层相关的仲裁合约在一层先部署好，就会增加成本。


CREATE2 提供了一种新的合约部署方式，合约地址由发送方地址，salt，以及初始化代码决定。这样一来，二层的系统就可以基于一个尚未上链的合约来写代码——因为此时合约地址是已知的——必要时再部署合约，这就节约了成本，简化了反事实状态通道的设计方案。