# Context

在GO程序中可能同时存在许多协程，这些协程被动态地创建和销毁。例如，在典型的http服务器中，每个新建立的连接都可能新建一个协程。当请求完成后，协程也随之被销毁。但是，**请求可能临时终止也可能超时，这个时候我们希望安全并及时地停止协程**，而不必一直占用系统的资源。因此，需要一种能够优雅控制协程退出的手段，


## 为什么需要context

有一句关于go的名言--如果你不知道如何退出一个协程，那么就不要创建这个协程。在context之前，管理协程退出需要协助通道close的机制，该机制会唤醒所有监听该通道的协程，并触发响应的退出逻辑