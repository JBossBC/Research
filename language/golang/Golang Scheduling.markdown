# Golang scheduling

golang为了对协程进行更有效的管理，将协程分为多个状态

+ _Gidle为协程刚开始创建时的状态，当新创建的协程初始化后，会变为_Gdead状态,_Gdead状态也是写成被销毁时的状态
+ _Grunnable表示当前协程在运行队列中，正在等待运行
+ _Grunning代表当前协程正在被运行，已经被分配给了逻辑处理器和线程
+ _Gwaiting代表当前协程在运行时被锁定，不能执行用户代码。在垃圾回收及channel通信时会遇到这种情况
+ _Gsyscall代表当前协程正在执行系统调用
+ _Gpreempted是GO1.14新加的状态，代表协程G被强制抢占后的状态
+ _Gcopystack代表在进行协程栈扫描时发现需要扩容或缩小协程栈空间，将协程中的栈转移到新栈时的状态。


## 特殊协程g0与协程切换

协程g0运行在操作系统线程栈上，其主要作用是执行协程调度得一系列运行时代码，而一般的协程无差别地用于执行用户代码。很显然，执行用户代码的任何协程都不适合进行全局调度。

在用户协程退出或者被抢占时，意味着需要重新执行协程调度，这时需要从用户协程g切换到协程g0.要注意的是，每个线程地内部都在完成这样的切换与调度循环。

和线程类似，协程切换的过程叫做协程地上下文切换。当某一个协程g执行上下文切换时需要保存当前协程的执行现场，才能够在后面切换回g协程时正常执行。**协程的执行现场存储在g.gobuf结构体中，g.gobuf结构体主要保存CPU中几个重要的寄存器值，分别是rsp、rip、rbp。**