# Golang map

go语言中的map又被称为哈希表，是使用频率极高的一种数据结构。哈希表的原理是将多个键/值对分散存储在buckets(桶)中。

    hash=hashfunc(key)
    index=hash%array_size

在此伪代码中,第一部通过哈希算法计算键的哈希值，其结果与桶的数量无关。接着通过执行模运算得到0-array_size-1之间的index序号。在实践中，我们通常将map看作O(1)时间复杂度的操作，通过一个键(key)快速寻找对应的唯一值(value)。在许多情况下,哈希表的查找速度明显快于一些搜索树形式的数据结构，被广泛用于关联数组、缓存、数据库缓存等场景中。

## 哈希碰撞和解决方法

哈希函数在实际中遇到的最常见的问题是哈希碰撞，即不同的键通过哈希函数可能产生相同的哈希值。如果将2450个键随机分配到一百万个桶中，根据概率计算，至少有两个键被分配到同一个桶中的可能性有95%，it's crazy。哈希碰撞导致一个桶中可能存在多个元素，有多种方式可以避免哈希碰撞,一般有两种方法:**拉链法以及开放寻址法**

拉链法将同一个桶中的元素通过链表的形式进行连接，这是一种最简单、最常用的策略。随着桶中元素的增加，可以不断连接新的元素，同时不用预先为元素分配内存。**拉链法的不足之处在于,需要存储额外的指针用于链接元素,这增加了整个哈希表的大小。同时由于链表存储的地址不连续,所以无法高效利用CPU高速缓存(amazing),同时我们也应该注意到,利用CPU高速缓存的同时，也需要注意缓存一致性可能导致的性能损失。**