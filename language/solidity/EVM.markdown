# EVM

以太坊虚拟机是智能合约的运行环境。它不仅是沙盒封装的，而且是完全隔离的,也就是说在EVM中运行代码是无法访问网络、文件系统和其他进程的。甚至智能合约之间的访问也是受限的。

## 账户

以太坊中有两类账户(它们共用同一个地址空间):外部账户由公钥-私钥对(也就是人)控制;合约账户由和账户一起存储的代码控制

外部账户的地址是由公钥决定的，而合约账户的地址是在创建该合约时确定的(这个地址通过合约创建者的地址和从该地址发出过的交易数量计算得到的，也就是所谓的"nonce")

无论账户是否存储代码，这两类账户对EVM来说是一样的。

每个账户都有一个键值对形式的持久化存储。其中key和value的长度都是256位，我们称之为存储。

此外，每个账户有一个以太币余额,余额会因为发送包含以太币的交易而改变

## 交易

交易可以看作从一个账户发送到另一个账户的消息。它能包含一个二进制数据(合约负载)和以太币。

如果目标账户含有代码，此代码会被执行，并以payload作为入参。

如果目标账户是零账户(账户地址为0),此交易将创建一个新合约。这个用来创建合约的交易的payload会被转换为EVM字节码并执行。执行的输出将作为合约代码被永久存储。这意味着，为创建一个合约，你不需要发送实际的合约代码，而是发送能够产生合约代码的代码。

## Gas

一经创建，每笔交易都收取一定数量的gas，目的是限制执行交易所需要的工作量和为交易支付手续费。EVM执行交易时,gas将按特定规则逐渐耗尽。

gas price是交易发送者设置的一个值，发送者账户需要预付的手续费="gas_price * gas"。如果交易执行后还有剩余gas会原路返还。

无论执行到什么位置，一但gas被耗尽，将会触发一个out-of-gas异常。当前调用帧所做的所有状态修改都将被回滚。

> 调用帧指的是EVM的运行栈(stack)中当前操作所需要的若干元素。

## 存储，内存和栈

每一个账户都有一块持久化内存区称为存储。存储是将256位字映射到256位字的键值存储区。在合约中枚举存储是不可能的，且读存储的相对开销很高，修改存储的开销甚至更高。合约智能读写存储区内属于自己的部分。

第二个内存区域称为内存，合约会试图为每一次消息调用获取一块被重新擦拭干净的内存实例。内存是线性的，可按字节级寻址，但读的长度被限制为256位，而写的长度可以是8位或256位。当访问之前从未访问过的内存字时，内存将按字进行扩展。扩容也将消耗一定的gas。随着内存使用量的增长，其费用也会提高(以平方级别)。

EVM不是基于寄存器的，而是基于栈的，因此所有的计算都在一个被称为栈的区域执行。栈最大有1024个元素，每个元素是一个字。对栈的访问只限于其顶端，限制方式为:允许拷贝最顶端的16个元素中的一个到栈顶，或者是交换栈顶元素和下面16个元素中的一个。所有其他操作都只能取最顶的两个(或一个，或更多，取决于具体的操作)，运算后，把结果压入栈顶。当然可以把栈上的元素放到存储或内存中。但是无法只访问栈上指定深度的哪个元素，除非先从栈顶移除其他元素。