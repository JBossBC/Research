# The difference of MTU and MSS

## Question

拥塞控制的实现?
什么是ICMP?

+ MTU

MTU(maximum transmit unit)最大传输单元，由数据链路层进行规范(数据链路层保证了比特流安全的传输)，缺省值为1500，此值根据在一般网络环境下对于传播时延和传播效率的优解。值过高可能会导致信道拥堵，值过低可能会导致数据真实传输效率低。

+ MSS

MSS(maximum segment size)最大报文长度:这是tcp对应用层数据大小的一种限制，存在于tcp数据报的options中.为什么tcp要设计MSS?这和tcp的拥塞控制有一定的联系，对于目前的端到端协议，假如客户端发送时的MTU小于传输路程中的某一台路由器，那么此台路由器的ip层会将数据报进行分片处理，这种情况会导致服务器接收到分片后的数据时间可能会有一定的时间差，这会导致服务器对数据包进行重组,影响末端系统的处理时间，在一定程度下会影响RTT的有效性，阻碍TCP对传输信道的拥塞控制判断。所以对于tcp协议来讲一般在端就将分片工作在网络层之前就做好。我们一般都将tcp中的MSS看作MTU的替代，为了防止在网络层进行分片操作，同时对于MSS本身来说，无异于赋予MTU灵活性，根据信道的实时情况来改变传输数据的长度。

TCP怎么防止在传输过程中的分片?
对于TCP而言，首先会设置tcp数据报中的flag中的DF为1，也就是不允许分片，对于在传输过程中如果路由器遇到MTU小于两端规定的MTU，那么路由器会丢弃此数据报，并且返回一个ICMP包，如图所示，ICMP中还会携带该路由器允许的MTU，这样主机就可以调整自己
的MSS来达到避免分片
![](https://img-blog.csdnimg.cn/img_convert/0720da52cde591367dc7ec57eacadffd.png)

+ RTT

RTT(Round-Trip Time)往返时延，往返时延由三个部分决定:链路的传播时间，末端系统的处理时间，路由器的缓存中排队和处理时间，前面两个值相对不变,路由器的缓存中的排队和处理时间会随着整个网络拥塞程度
的变化而变化，所以RTT的变化在一定程度上反映了网络拥塞程度的变化.

RTT怎么获得?

第一种方式:通过tcp报文中的timestamp
RTT=当前时间-timestamp回显的时间
timestamp回显的时间代表数据包发送出去的时间

*第二种方式:重传队列中数据包的TCP控制块*


+ RTO

RTO(retransmission time out):超时重传时间，tcp能够保证数据的完整性和有效性，那么在不确定的网络环境中，tcp如何判断数据报已经丢失并且做出相应调整呢?第一种方式是:RTO和RTT共同作用的结果，RTT反应了实时状态下网络的拥塞程度，对于一台主机来说，我们可以理解为主机认为在RTT的时间内，一定能收到发送报文的ack，如果未在RTT内收到的话，那么可以在一定程度上认为数据报已经丢失，需要重发。但是RTT的波动性会造成判断不准确，一般来说RTO大于RTT,这给了动态的网络环境一些buffer time，如何根据RTT设置RTO的值，能够对网络性能产生很大的影响;第二种方式:tcp的快速重传机制，之前我们讲到拥塞控制，这不需要等待rto超时。tcp中有一个累计确认机制(当接收端收到比期望序号大的报文段时，便会重复发送最近一次确认的报文段的确认信号，我们称之为冗余ACK)，比如说服务器A一次发送五个数据包给服务器B，因为某些原因，数据包2在传输的过程中丢失了，服务器A在收到服务器B发送的有关数据包3、4、5的ack信息中，会包含期望收到的序列号信息也就是ack 2，服务器A在收到多个需要ACK2的时候，会判定数据包2已经丢失，然后对数据包2进行重传。一般来说，收到3次冗余的ack就会判定该数据包已经丢失。快速重传的机制用来防止tcp拥塞控制的时候的错误判断导致信息传输效率下降。
