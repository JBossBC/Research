# Http

## Question

字符集和编码方式有什么不同？

## what is http?

http:超文本传输协议，是一个基于请求与响应，无状态，应用层的协议。设计HTTP的初衷是为了提供一种发布和接收HTML页面的方法

 | 版本 | 时间 |  内容 | 发展现状 |
 | :-:|:-:|:-: | :-: |
 |   HTTP/0.9  |1991年|不涉及数据包传输，规定客户端和服务器之间通信格式，只能GET请求|没有作为标准
 |HTTP/1.0|1996年|传输内容格式不限制，增加PUT、PATCH、HEAED、OPTIONS、DELETE命令|正式作为标准|
|HTTP/1.1|1997年|持久连接(长连接)、节约带宽、HOST域、管道机制、分块传输编码|2015年前广泛使用
|HTTP/2|2015年|多路复用、服务器推送、头信息压缩、二进制协议等|逐渐覆盖市场|
![](https://img-blog.csdn.net/20180723105652242?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW9taW5nMTAwMDAx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)
![](https://img-blog.csdn.net/20180723105652242?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW9taW5nMTAwMDAx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)

多路复用:通过单一的HTTP/2连接请求发起多重的请求-响应消息，多个请求stream共享一个tcp连接，实现多留并行而不是依赖建立多个TCP连接。

### HTTP特点:

1. 无状态:协议对客户端没有状态存储，对事务处理没有记忆能力，比如访问一个网站需要反复进行登录操作
2. 无连接:HTTP/1.1之前，因为无状态特点，每次请求需要通过tcp三次握手四次挥手，和服务器重新建立连接。比如某个客户机在短时间多次请求同一资源，服务器并不能区别是否已经响应过用户的请求，所以每次需要重新相应请求，需要消耗不必要的时间和流量
3. 基于请求和相应:由客户端发起请求，服务端响应
4. 简单快速、灵活
5. 通信使用明文、请求和响应不会对通信方确认，无法保护数据的完整性

针对HTTP无状态的解决策略

+ cookie/session技术
+ HTTP/1.1持久连接(HTTP keep-alive)方法，只要任意一端没有明确提出断开连接，则保持TCP连接状态，在请求首部字段中的Connection:keep-alive即为表明使用了持久连接

### HTTPS特点:

+ 基于HTTP协议，通过SSL或TLS提供加密处理数据、验证对方身份以及保护数据完整性

       + 内容加密:采用混合加密技术，中间者无法直接查看明文内容
       + 验证身份，通过证书认证客户端访问的是自己的服务器
       + 保护数据完整性:防止传输的内容被中间人冒充或者篡改

> 混合加密:结合非对称加密和对称加密技术。客户端使用对称加密生成密钥对传输数据进行加密，然后使用非对称加密的公钥再对密钥进行加密，所以网络上传输的数据是被密钥加密的密文和用公钥加密后的秘密密钥，因此即便被黑客截取，因为没有私钥，所以无法获取到加密明文的密钥，也就无法获取到明文数据
>
>数字摘要:通过单项hash函数对原文进行哈希，将需加密的明文hash成一串固定长度的消息摘要，不同明文的消息摘要结果不相同。

![](https://img-blog.csdn.net/20180719103559793?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW9taW5nMTAwMDAx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)

![](https://img-blog.csdnimg.cn/20190803111825690.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpYW9taW5nMTAwMDAx,size_16,color_FFFFFF,t_70)

## 一个标准HTTP请求构成

HTTP会话由HTTP客户端(即用户的浏览器)通过用户代理打开，并且连接请求消息被发送到HTTP服务器(WEB服务器)。请求消息也称为"客户端请求"，由以下几行组成: ①、请求行 ②、请求头 ③、请求体

传递响应后，web服务器将关闭连接。这种连接称为无状态连接，因为它仅在数据交换期间存在。

+ 请求行

请求行以一个方法符号开头，以空格分开，后面跟着请求的url和协议的版本，格式如下:

> Method Request-URI HTTP-Version CRLF 

Method 表示请求方法
Request-URL 是一个统一资源标识符
HTTP-Version 表示请求的HTTP协议版本
CRLF 表示回车和换行(除了结尾的CRLF，不允许出现单独的CR或LF字符)
请求方法(所有方法全为大写)有多种，各个方法的解释如下

    GET ： 请求获取Request-URI所标识的资源
    POST ：在Request-URI所标识的资源后附加新的数据
    HEAD ：请求获取由Request-URI所标识的资源的响应消息报头
    PUT ： 请求服务器存储一个资源，并用Request-URI作为其标识
    DELETE ：请求服务器删除Request-URI所标识的资源
    TRACE  ：请求服务器回送收到的请求信息，主要用于测试或诊断
    CONNECT：保留将来使用
    OPTIONS ：请求查询服务器的性能，或者查询与资源相关的选项和需求

+ 请求头

HTTP消息报头包括:普通报头、响应报头、请求报头、实体报头，每一个报头域都是由名字+:+空格+值组成，消息报头域的名字是大小写无关的

+ 普通报头
  
     在普通报头中，有少数报头域用于所有的请求和响应消息，但并不用于被传输的实体，只用于传输的消息
   
 |字段名|说明|
  | -- | -- |
 |Cache-Control|控制缓存行为|
|Connection|连接的管理|
 |Date|普通报头域表示消息产生的日期和时间|
|Pragma|http1.0中的保温指令控制|

+ 请求报头

请求报头允许客户端向服务器端传递请求的附加信息以及客户端自身的信息。常见的请求报头包括

|字段名|说明|
|--|--|
|Accept|客户端可处理的媒体类型:Accept:image/git|
|Accept-Charset|客户端可处理的字符集|
|Accept-Encoding|客户端的编码方式|
|Accept-Langulage|客户端指定得到语言类型|
|Authrization|web认证信息|
|Expect|期待服务器的特定行为|
|Host|请求报头域主要用于指定被请求资源的Internet主机和端口号|
|User-Agent|请求报头域允许客户端将它的操作系统、浏览器和其他属性
|Referer|请求中的url上一跳地址|

+ 响应报头

响应报头允许服务器传递不能放在状态行的附加响应信息，以及关于服务器的信息和对Request-URL所标识的资源进行下一步访问的信息。常见的响应报头包括:

|字段名|说明|
|--|--|
|Age|资源的创建时间|
|Location|客户端重定向至指定的URL|
|Retry-After|再次发送请求的时机|
|www-Authenticate|服务器对客户端的认证|




### HTTP/1.1-标准化协议

基于HTTP1.0的缺点，待解决的问题有:
  1. 是否可以不用每次都重新建立连接
  2. 请求是否可以并行化不用被阻塞

所以HTTP1.1版本做了如下优化
  1. 首先是长连接。HTTP/1.1增加了一个connection字段，通过设置keep-alive，可以保持HTTP连接不断开，避免了每次客户端与服务器请求都要重复建立释放建立TCP连接，提高了网络的利用率。如果客户端想关闭HTTP连接，可以在请求头中携带Connection:false来告知服务器关闭请求
  2. 其次是HTTP/1.1支持请求管道化。基于HTTP/1.1的长连接，使得请求管线化成为可能。管线化使得请求能够"并行"传输。举个例子来说，假如响应的主体是一个html页面，页面里面包含了许多img，这个时候keep-alive就起了很大的作用，能够进行"并行"发送多个请求。
  3. 在HTTP/1.1增加Host请求头字段，我们可以在一台WEB服务器上可以在同一个ip地址和端口号上使用不同的主机名来创建多个虚拟WEB站点
  4. HTTP/1.1还提供了与身份认证、状态管理和cache缓存等机制相关的请求头和响应头。
  5. HTTP/1.1支持断点续传????

这里要说的是，HTTP/1.1管道化所谓的并行传输其实并未做到真正的并行。**服务器必须按照客户端请求的先后顺序依次回送相应的结果，以保证客户端能够区分出每次请求的响应内容。即管道化做的事情是把先进先出的队列从客户端迁到了服务器，由服务器来维护这个状态**但是在服务器的响应也是有先后顺序的。比如:

客户端同时发送两个请求:1.请求获取html资源；2.请求获取css资源；

这个时候在服务器是css资源先准备好，但是服务器还是会等html资源准备好发送html资源，等响应完毕之后再发送css资源。可见所谓的管道化技术还是无法解决"阻塞"的问题。同时，因为管道化技术存在各种各样的问题，浏览器厂商要么直接关闭该功能，要么就直接不支持，所以该功能实际上并没有被用到.

**目前浏览器厂商采用的做法是针对同一个域名，最多允许同时发起6个请求，所以通过这种方式真正的做到了并行。**


### HTTP/2

HTTP/2对HTTP/1.1的主要更改集中在提高性能上；诸如多路复用，标头压缩，优先级划分和协议协商之类的一些关键功能。

**二进制框架**

**HTTP/2所有性能增强的核心是新的二进制框架层，该层指示如何在客户端和服务器之间封装和传输HTTP消息。**

![](https://tva1.sinaimg.cn/large/007S8ZIlgy1gft6simh7ej30li0b0wg5.jpg)


**新的二进制框架旨在对请求体内容做进一步编码以使得传输更为高效，HTTP语义(请求头，请求行)不受影响**，但是它们的方式在运输过程中编码是不同的。与换行符分割纯文本HTTP/1.x协议不同，所有HTTP/2通信都分为较小的消息和帧，每个消息和帧均已二进制格式编码。

### HTTP/2术语:流，消息和帧

新的二进制框架机制的引入改变了客户端和服务器之间数据交换的方式。

+ 流:已建立的连接内的双向字节流，可以携带一个或多个信息。
+ 消息:映射到逻辑请求或响应消息的帧的完整序列。
+ 帧:HTTP/2的最小通信单元，每一个通信单元都包含一个帧头，该头至少表示了帧所属的流。


这些术语的关系可以概括如下:

+ 所有通信都是单个tcp连接执行的，该tcp连接可以承载任意数量的双向流。
+ 每个流都有一个唯一的标识符和可选的优先级信息，用于承载双向消息。
+ 每个消息都是逻辑HTTP消息，例如请求或响应，由一个或多个帧组成。
+ 帧是承载特定类型的数据(例如HTTP标头，消息有效负载等)的最小通信单元。来自不同流的帧可以被交织，然后通过每个帧头中的嵌入式1流标识符重新组合。

![](https://tva1.sinaimg.cn/large/007S8ZIlgy1gft6shshh6j30i40eqjte.jpg)


