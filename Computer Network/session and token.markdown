# session and token

## session

cookie是由RFC6265标准规范规定的一个概念，有对应的呈现标准和呈现方式。总体来说，cookie可以理解为HTTP的一部分，与cookie不同，session属于web应用开发中的一个抽象的概念，它对应cookie，用来在应用服务器端表示和保存用户的信息。但是，session并没有标准化的定义以及实现方式，因此在不同的web编程语言中都有不同的理解和实现方式，即使在同一种web编程语言中，不同的引用服务器的实现方式也有所不同。这就导致了:不同厂家的应用服务器不通过某种第三方手段是无法做到"单点登录的",虽然单点登录存在session,鉴权和相互信任的复杂问题。

### session是在什么时候被创建的

对于cookie来说，set-cookie指令是服务器第一次验证用户身份后回应给浏览器的，此时服务器已经生成用户的身份信息，因此我们可以确定一个事实:该用户对应的session会话此时也生成了，并由我们的web server控制整个生命周期

### session中的数据被存储在哪里

session中的数据通常被存储在应用服务器的内存中，准确理解这一点对于我们编程和设计架构来说很关键!哪些用户数据适合被放在session中?需要综合考虑业务层面的要求、性能以及内存占用等几个关键因素。

从上面的分析结果来看，面对大规模的用户访问，我们能做的有以下几方面。

+ 尽可能少放"大尺寸"的数据在用户Session中，并且尽可能及早清除无效数据，释放session占用的内存。
+ 考虑到把更多的session数据转移到浏览器端的cookie中，所以通过"甩锅"方式减少服务器端的压力
+ 前端积极采用HTML5技术,Cookie不适合用于大量数据的存储，并且cookie每次都会被增加到HTTP请求头中并传输到服务器端，这也增加了网络流量的压力，因此HTML5提供了在用户端的浏览器中存储数据的新方法:localstorage和sessionstorage,后者就是专门解决服务器端session存储难题的"利器"。
+ 考虑到引入分布式存储机制，所以可以采用集群方式来应对单一服务器的session存储瓶颈。


## token

用户会话中的用户身份标识信息被存放在cookie中并保留在用户端的浏览器上。实际上。cookie的内容是被存放在磁盘中的，其他人是有可能直接访问到cookie文件的；另外，cookie的信息是明文保存的，意味着攻击者可以通过猜测并伪造cookie数据破解系统。避免这种漏洞的直接防护手段就是用数字证书对敏感数据进行加密签名，在加密签名后这串字符串就是我们所说的Token,这样攻击者就无法伪造token了，因此token在本质上是session的改进版。与session将用户状态保留在服务器端的常规做法不同，token机制则把用户状态信息保存在Token字符串里，服务器端不再维护客户状态，服务器端就可以做到无状态，集群也更容易扩展。那么，Token数据是被放在哪里的呢?标准的做法将其放在专用的HTTP Header"X-Auth-Token"中保存并传输，但客户端在拿到Token以后可以将其在本地保存。在app程序中，token信息可以被保存在手机中，而web应用中，token也可以被保存在H5的localstorage中。需要注意的是,Token与Cookie是完全无关的!

总结下来，Token有以下特点:

+ 在Token中包含足够多的用户信息，JWT能轻松实现单点登录，因为用户的状态已经被传送到了客户端。
+ 不存在Cookie跨域的限制问题，也不存在Cookie相关的一些攻击漏洞,例如CSRF
+ 因为有签名，所以JWT可以防止被篡改
+ 适用于API的安全机制,适用于移动客户端与PC客户端的开发，此时Cookie是不被支持的;Token方案则简单有效，可以用一套Token验证代码来应对浏览器类客户端和非浏览器类客户端。



## JWT

每个JWT对象实际上都是一个字符串，它由三部分组成:头部、载荷、签名，其中header声明了该JWT所用的签名算法是哪种,需要注意的是，虽然JWT支持对称加密算法来做签名，但正常情况下，我们都应该使用非对称加密算法来做签名，并且我们要妥善保管私钥，谨防泄密，客户端用公钥证书去验证签名。Payload可以理解为一个Map字典，里面的exp字段表示JWT的失效时间，是确保安全的重要字段。此时，我们可以在payload里面增加自定义的私有字段，用来保存更多的用户特定信息，特别注意的是，payload是明文传输的，所以我们不能把私密信息放入payload里。signature部分则是将header与payload的内容放在一起，用在header里面声明的签名算法进行签名而得到一个字符串,即完整的JWT字符串组成为:Header(明文)、Payload(明文)、signature(签名\密文)。

任何一方在收到这个JWT字符串的Token后，都可以通过解析得到header与payload的完整内容。为了证实这两段信息是否是某个组织发出的真实信息，我们可以用该组织的公钥证书对签名信息进行验证。

 

