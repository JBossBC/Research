# Kubernetes

kubernetes是谷歌十几年来大规模容器技术应用的重要成果。基于容器技术来实现资源管理的自动化，以及跨多个数据中心的资源利用率的最大化。kubernetes也是一个全新的基于容器技术的分布式架构领先方案，是容器云的优秀平台选型方案，已成为新一代的基于容器技术的PaaS平台的重要底层框架，也是云原生技术生态圈的核心，服务网格、无服务器架构等新一代分布式架构框架及技术纷纷基于kubernetes实现。

kubernetes是一个完备的分布式系统支撑平台。kubernetes具有完备的集群管理能力，包括多层次的安全防护和准入机制、多租户应用支撑能力、透明的服务注册和服务发现机制、内建的智能负载均衡器、强大的故障发现和自我修复能力、服务滚动升级和在线扩容能力、可扩展的资源自动调度机制，以及多粒度的资源配额管理能力。同时，kubernetes提供了完善的管理工具，这些工具涵盖了包括开发、部署测试、运维监控在内的各个环节。


在kubernetes中，Service是分布式集群架构的核心。一个Service对象拥有如下关键特征。

+ 拥有唯一指定的名称
+ 拥有一个虚拟IP地址和端口号
+ 能够提供某种远程服务能力
+ 能够将客户端对服务的访问请求转发到一组容器应用上。


Service的服务进程通常基于Socket通信方式对外提供服务，比如Redis、Memcached、Mysql、web Server，或者是实现了某个具体业务的特定TCP Server进程。虽然一个Service通常由多个相关的服务进程提供服务，每个服务进程都有一个独立的Endpoint(IP+Port)访问点，但Kubernetes能够让我们通过Service(ClusterIP+Service Port)连接指定的服务。有了kubernetes内建的透明负载均衡和故障恢复机制，不管后端有多少个具体的服务进程，也不管某个服务进程是否由于发生故障而被重新部署到其他机器，都不会影响对服务的正常调用。更重要的是，这个Service本身一旦创建就不再变化，这意味着我们再也不用为kubernetes集群中应用服务进程IP地址变来变去的问题头疼了。

容器提供了强大的隔离功能，所以我们有必要把为Service提供服务的这组进程放入容器中进行隔离。为此，kubernetes设计了pod对象，将每个服务进程都包装到相应的pod中，使其成为在pod中运行的一个容器。为了建立Service和Pod间的关联关系，kubernetes首先给每个pod