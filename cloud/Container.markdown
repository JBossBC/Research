# Container

## Quesion

从操作系统层面了解容器?
为什么不用多进程来隔离应用程序，而使用操作系统层面的隔离应用程序?这不是一个冗余操作吗，浪费CPU资源 

为了降低虚拟机造成的物理主机资源浪费，提高物理主机的资源利用率，并能够提供像虚拟机一样良好的应用程序隔离运行环境。容器中的进程和主机的进程等价，也就是说容器与进程的优势在于其的可移植性。




# 容器

容器是对应用程序及其依赖关系的封装。乍一看容器只是个轻量级的虚拟机。它和虚拟机一样拥有一个被隔离的操作系统实例，用来运行应用程序。

    + 容器能与主机的操作系统共享资源，因此它的效率高出一个数量级。启动和停止容器均只需一瞬间。相比在主机上直接运行程序，容器的性能损耗非常低，甚至是零损耗。
    + 容器具有可移植性，这极有可能彻底解决由于运行环境的些许改变而导致的问题，甚至有可能彻底终止开发者的抱怨:"可是程序在我的计算机上能正常工作"
    + 容器是轻量的，这意味着开发者能同时运行数十个容器，并能模拟分布式系统在真实运行环境下的情况。
    + 对于最终用户及开发者而言，容器的优势不仅仅体现在云端部署。用户可以下载并执行复杂的应用程序，而无需花费大量时间在配置和安装的问题上，也无需担心对系统本身的改动。另一方面，应用程序的开发者不用再操心用户环境的差异，以及依赖关系是否满足。



## 容器与虚拟机的比较

+ 虚拟机:虚拟机需要一个虚拟机管理程序来创建及运行虚拟机，控制访问底层操作系统以及硬件的权限，以及在必要时解析系统调用接口。每个虚拟机需要一个完整的操作系统，用来运行的应用程序以及所需的程序库。

+ 容器:与虚拟机不同，主机的内核与容器共享，这意味着容器只能运行与主机一样的内核。容器引擎负责启动及停止容器，与虚拟机管理程序差不多。但是，**容器中执行的进程与主机自身的进程是等价的，因此没有类似虚拟机管理程序执行所带来的性能损耗。**