# Adapter Mode

适配器模式是一种结构型设计模式,它能使接口不兼容的对象能够相互合作。

## Question

加入在开发一款股票市场检测程序，它会从不同来源下载XML格式的股票数据,然后向用户呈现出美观的图片。在开发过程中，你决定在程序中整合一个第三方智能分析函数库。但是遇到了一个问题，那就是分析函数库只兼容JSON格式的数据。

你可以修改程序库来支持XML。但是,这可能需要修改部分依赖该程序库的现有代码。甚至还有更糟糕的情况，你可能根本没有程序库的源代码,从而无法对其进行修改。

## 解决方案

你可以创建一个适配器。这是一个特殊的对象，能够转换对象接口，使其能与其他对象进行交互。

**适配器模式通过封装对象将其复杂的转换过程隐藏于幕后。被封装的对象甚至察觉不到适配器的存在。**例如,你可以使用一个将所有数据转化为英制单位的适配器封装运行于米和千米单位制中的对象。

适配器不仅可以转换不同格式的数据，其还有助于采用不同接口的对象之间的合作。他的运作方式如下:

+ 适配器实现与其中一个现有对象兼容的接口
+ 现有对象可以使用该接口安全地调用适配器方法
+ 适配器方法被调用后将以另一个对象兼容的格式和顺序将请求传递给该对象。


有时你甚至可以创建一个双向适配器来实现双向转换调用。


让我们回到股票市场程序。为了解决数据格式不兼容的问题,你可以为分析函数库中的每个类创建将XML转换为JSON格式的适配器，然后让客户端仅通过这些适配器来与函数库进行交流。当某个适配器被调用时，它会将传入的XML数据转换为JSON数据，并将其传递给被封装分析对象的相应方法。

对象适配器:实现时使用了构成原则:适配器实现了其中一个对象的接口,并对另一个对象进行封装。


简单的适配器模式其实从业务需求上面来看，在产品迭代升级时,前台中需要使用target对象中的handle方法对业务进行处理,但后台之前实现的方法有origin对象中的dealwith方法能够处理,为了符合业务规范和迭代简单的需求，我们需要使用一个适配器让target对象中的handle与origin对象中的dealwith进行"融合调用"。上述的需求为简单的适配器,仅仅适配方法名,但复杂的适配器如上图所说，进行适配中需要将XML格式转换为JSON格式再调用origin对象中的dealwith,也就是说，**复杂的适配器,不仅仅局限于适配方法名，还需要适配原来的业务流程(这里起到了一个业务逻辑转换的作用)**,这一点为适配器的核心。在实际的产品研发的过程中，适配器的作用在于不改动原有的业务逻辑以及不增加现有冗余的代码量的情况下,对新的业务逻辑进行适配处理。适配器原理在产品迭代升级的使用率很高,这种场景符合了不能改动原有的业务逻辑的环境。
