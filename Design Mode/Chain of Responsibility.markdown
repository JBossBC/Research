# Chain of Responsibility

责任链模式是一种行为设计模式，允许你将请求沿着处理者链进行发送。收到请求后，每个处理者均可对请求进行处理，或将其传递给链上的下个处理者

## Question

假如你正在开发一个在线订购系统。你希望对系统访问进行限制，只允许认证用户创建订单。此外，拥有管理权限的用户也拥有所有订单的完全访问权限。

简单规划后，你会意识到这些检查必须一次进行。只要接收到包含用户凭据的请求，应用程序就可尝试对进入系统的用户进行认证。但如果由于用户凭据不正确而导致认证失败，那就没有必要进行后续检查了。

在接下来的几个月里，你实现了后续的及格检查步骤

+ 一位同事认为直接将原始数据传递给订购系统存在安全隐患。因此你增加了额外的验证步骤来清理请求中的数据
+ 过了一段时间，有人注意到系统无法抵御暴力密码破解方式的攻击。为了防范这种情况，你立刻添加了一个检查步骤来过滤同一IP地址的重复错误请求。
+ 又有人提议你可以对包含同样数据的重复请求返回缓存中的结果，从而提高系统响应速度。因此，你增加了一个检查步骤，确保只有没有满足条件的缓存结果时请求才能通过并被发送给系统。
+ 检查代码本来就已经混乱不堪，而每次新增功能都会使其更加臃肿。修改某个检查步骤有时会影响其他的检查步骤。最糟糕的是，当你希望复用这些检查步骤来保护其他系统组件时，你只能复制部分代码，因为这些组件只需部分而非全部的检查步骤。

## resolve

责任链会将特定行为转换为被称作处理者的独立对象。再上述示例中，每个检查步骤都可被抽取为仅有单个方法的类，并执行检查操作。请求及其数据则会被作为参数传递给该方法。

模式建议你将这些处理者连成一条链。链上的每个处理者都有一个成员变量来保存对于下一个处理者的引用。除了处理请求外，处理者还负责沿链传递请求。请求会在链上移动，直到所有处理者都有机会对其进行处理。

最重要的是:处理者可以决定不再沿着链传递请求，这可高效地取消后续所有处理步骤。


