# Bridge Mode

桥接模式是一种结构型设计模式,可将一个大类或一系列紧密相关的类拆分为**抽象和实现**两个独立的层次结构,从而能在开发的时候分别使用。从本质上来看，桥接模式就是将抽象与实现相分离。

## Question

抽象?实现?

假如你有一个几何类，从它能扩展出两个子类:圆形和方形。你希望对这样的类层次结构进行扩展以使其包含颜色,所以你打算创建名为红色和蓝色的形状子类。但是，由于你已有两个子类，所以总共需要创建四个类才能覆盖所有组合。

在层次结构中新增形状和颜色将导致代码复杂程序指数增长。

普通的解决方法:定义两个接口分别为图形和颜色，然后定义两个接口的实现类，这种设计方式，两个接口为同一阶层的地位，实现类以组合的方式进行动态扩展。

## 解决方案

问题的根本原因是我们试图在两个独立的维度-形状与颜色--上扩展形状类。这在处理类继承时是很常见的问题。

**桥接模式通过将继承改为组合的方式(接口组合)来解决这个问题**。具体来说，就是抽取其中一个维度并使之成为独立的类层次，这样就可以在初始类中引用这个新层次的对象，从而使得一个类不必拥有所有的状态和行为。

根据该方法，我们可以将颜色相关的代码抽取到拥有红色和蓝色两个子类的颜色类中，然后在形状类中添加一个指向某一颜色对象的引用成员变量。现在，形状类可以将所有与颜色相关的工作委派给连入的颜色对象。这样的引用就成为了形状和颜色之间的桥梁。此后，新增颜色将不再需要修改形状的类层次，反之亦然。

#### 抽象部分和实现部分

设计模式四人组的著作在桥接定义中提出了抽象部分和实现部分两个术语。

抽象部分(接口)是一些实体的高阶控制层。该层自身不完成任何具体的工作，它需要将工作委派给实现部分层。

注意:这里提到的内容与编程语言中的接口和抽象类无关。

在实际的程序中，抽象部分是图形用户界面，而实现部分则是底层操作系统代码，GUI层调用API层来对用户的各种操作做出响应。

## 实现方式

1. 明确类中独立的维度。独立的概念可能是:抽象/平台，域/基础设施,前端/后端或接口/实现。
2. 了解客户端的业务需求，并在抽象基类中定义它们。
3. 确定在所有平台上都可执行的业务。并在通用实现接口中声明抽象部分所需的业务。
4. 为你域内的所有平台创建实现类，但需确保它们遵循实现部分的接口
5. 在抽象类中添加指向实现类型的引用成员变量。抽象部分会将大部分工作委派给该成员变量所指向的实现对象。
6. 如果你的高层逻辑有多个变体,则可以通过扩展抽象基类为某个变体创建一个精确的抽象。
7. 客户端代码必须将实现对象传递给抽象部分的构造函数才能使其能够相互关联。此后，客户端只需与抽象对象进行交互，无需和实现对象打交道。

## 与其他模式的关系

+ 桥接模式通常会于开发前期进行设计，使你能够将程序的各个部分独立开来以便开发。另一方面，适配器模式通常在已有程序中使用，让相互不兼容的类能够很好地合作。
+ 桥接、状态模式和策略模式(在某种程序上包括适配器模式)的接口非常相似。实际上，它们都基于组合模式--即将工作委派给其他对象，不过也各自解决了不同的问题。模式并不只是以特定方式组织代码的配方，你还可以使用它们来和其他开发者讨论模式所解决的问题。
+ 你可以将抽象工厂模式和桥接模式搭配使用。如果由桥接定义的抽象只能与特定实现合作，这一模式搭配就非常有用。在这种情况下，抽象工厂可以对这些关系进行封装，并且对客户端代码隐藏其复杂性。
+ 你可以结合使用生成器模式和桥接模式:主管类负责抽象工作，各种不同的生成器负责实现工作。

