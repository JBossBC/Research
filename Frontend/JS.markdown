# JS

## Question

'和"的区别

后端已经用viewUtil.writeJson封装成了json数组，为什么前端使用ajax的时候如果不指定dataType,默认success返回的是字符串呢？

undefined和null的区别

var trobj=$(\<tr>\</tr>)为什么成立?

## 为什么要学习JavaScript

1. HTML定义了网页的内容
2. CSS描述了网页的布局
3. JavaScript控制了网页的行为

JavaScript是一种轻量级的编程语言
JavaScript是可插入HTML页面的编程语言
JavaScript插入HTML页面后，可由所有的现代浏览器执行


DOM(document object model)(文档对象模型)是用于访问HTML元素的正式W3C标准。


## JavaScript可以通过不同的方式来输出数据

+ 使用window.alert()弹出警告框
+ 使用document.write()方法将内容写到HTML文档中
+ 使用innerHTML写到HTML元素
+ 使用console.log()写到浏览器控制台


## js语法

js是一个脚本语言???

### JS字面量

在编程语言中，一般固定值称为字面量，如3.14

数字字面量可以是整数或者小数，或者科学计数

字符串字面量可以使用单引号或双引号

表达式字面量用于计算

数组字面量定义一个数组

对象字面量定义一个对象

函数字面量定义一个函数

### js变量

在编程语言中，变量用来存储数据值

js使用关键字var来定义变量，使用等号来为变量赋值

变量可以通过变量名访问。在指令式语言中，变量通常是可变的。字面量是一个恒定的值

**变量是一个名称。字面量是一个值**

+ 变量必须以字母开头
+ 变量也能以$和_符号开头
+ 变量名称对大小写敏感

## js语句

js语句是发给浏览器的命令，这些命令的作用是告诉浏览器要做的事情。


## javascript数据类型
值类型:字符串、数字、布尔、空、未定义(Undefined)、symbol
引用数据类型:对象、数组、函数、正则和日期

> symbol是ES6引入的一种新的原始数据类型，表示独一无二的值

### js拥有动态类型

js拥有动态类型。这意味着相同的变量可用作不同的类型

对象的两种访问方式

1. 对象名.属性名
2.  对象名["属性名"]




构造函数

    function Persion(name,age){
     this.name=name;
     this.age=age;
     this.sayName=function(){console.log(this.name)};
    }


构造函数其实就是一个普通的函数，不同的是构造函数习惯上首字母大写，构造函数和普通函数的还有一个区别就是调用方式的不同，普通函数是直接调用，而构造函数需要使用new关键字进行调用。

构造函数执行创建对象的过程:

1. 调用构造函数，他会立刻创建一个新的对象
2. 将新建的对象设置为函数中this,在构造函数中可以使用this来引用新建的对象。
3. 逐行执行函数中的代码
4. 将新建的对象作为返回值返回



## this:

   + 当以函数的形式调用时，this是window
   + 当以方法的形式调用时，谁调用方法,this就是谁
   + 当以构造函数的形式调用，this就是新创建的那个对象




js切割字符串
   字符串.slice(begin,end)



## js 严格模式

js严格模式即在严格的条件下运行。

### 使用"use strict"指令

"use strict"指令不是一条语句，但是是一个字面量表达式，在js旧版本中会被忽视。

"use strict"的目的是指定代码在严格的条件下执行。

**严格模式下你不能使用为声明的变量**


### 为什么使用严格模式

消除js语法的一些不合理、不严谨之处，减少一些怪异行为

+ 消除代码运行的一些不安全之处，保证代码运行的安全
+ 提高编译器效率，增加运行速度
+ 为未来新版本的js做好铺垫

# js 计时事件

通过使用js，我们有能力做到在一个设定的时间间隔之后来执行代码，而不是在函数被调用后立即执行。我们称为计时事件。

在js中使用计时事件是很容易的，两个关键方法是:
+ setInterval()-间隔指定的毫秒数不停地执行指定的代码
+ setTimeout()-在指定的毫秒数后执行指定代码

## js异步编程

异步:从主线程发射一个子线程来完成任务

js的异步操作函数往往通过回调函数来实现异步任务的结果处理。

### 回调函数

回调函数就是一个函数，它是在我们启动一个异步任务的时候就告诉它:等你完成了这个任务之后要干什么。这样一来主线程几乎不用关心异步任务的状态了，他自己会善始善终。

setTimeout函数的第一个参数是一个回调函数，第二个参数是毫秒数，这个函数执行之后会产生一个子线程，子线程会等待第二个参数的毫秒数之后执行回调函数。

## js promise

js中的promise能够很优雅地书写复杂的异步任务。在需要执行多次异步函数的需求下，如果使用setTimeout()函数需要基于函数瀑布来实现，在维护上和异常处理上都是特别繁琐的事情，而且会让缩进格式变得非常累赘。基于promise 的多异步函数的使用能够更优化的处理这类问题

promise构造函数只有一个函数，是一个函数，这个函数在构造之后会直接被异步运行，所以我们称之为起始函数。起始函数包含两个参数resolve和reject。**resolve和reject都是函数，其中调用resolve代表一切正常，reject是出现异常时所调用的**

promise类有then()，catch()和finally()三个方法，这三个方法的参数都是一个函数，then可以将参数中的函数添加到当前promise的正常执行序列，catch()则是设定promise的异常处理序列，finally()则是在promise执行的最后一定会被执行的序列。then()传入的函数会按顺序依次执行，有任何异常都会直接跳到catch序列。


**resolve()中可以放置一个参数用于向下一个then传递一个值，then中的函数也可以返回一个值传递给then。但是，如果then中返回的是一个promise对象，那么下一个then将相当于对这个返回的promise进行操作。**

reject()参数中一般会传递一个异常给之后的catch函数用于处理异常

> resolve和reject的作用域只有起始函数，不包括then以及其他序列
> resolve和reject并不能使起始函数停止运行，别忘了return


异步函数async function中可以使用await指令，await指令后必须跟着一个promise，异步函数会在这个promise运行中暂停，知道其运行结束后再继续运行。异步函数实际上原理与promise原生的API机制是一模一样，只不过更便于程序员阅读

